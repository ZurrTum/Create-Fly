plugins {
    id 'fabric-loom' version '1.11-SNAPSHOT'
}

repositories {
    maven {
        name "REI"
        url "https://maven.shedaniel.me/"
        content {
            includeGroup "me.shedaniel"
            includeGroup "me.shedaniel.cloth"
            includeGroup "dev.architectury"
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

loom {
    splitEnvironmentSourceSets()
    accessWidenerPath = file("src/main/resources/create.accesswidener")
    mods {
        create {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    if (project.compile_only_fabric_api.equals("true")) {
        modCompileOnly fabricApi.module("fabric-rendering-fluids-v1", project.fabric_version)
        modCompileOnly fabricApi.module("fabric-transfer-api-v1", project.fabric_version)
        modCompileOnly fabricApi.module("fabric-events-interaction-v0", project.fabric_version)
        modCompileOnly fabricApi.module("fabric-renderer-api-v1", project.fabric_version)
    } else {
        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    }
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
    if (project.compile_only_rei.equals("false")) {
        modClientRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
    }
    modCompileOnly "maven.modrinth:sodium:${project.sodium_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": inputs.properties.version
    }

    exclude "_data"
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    inputs.property "archivesName", project.base.archivesName

    from("LICENSE")
    from("licenses") {
        into "licenses"
    }
}