import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'fabric-loom' version '1.11-SNAPSHOT'
}

repositories {
    maven {
        name "REI"
        url "https://maven.shedaniel.me/"
        content {
            includeGroup "me.shedaniel"
            includeGroup "me.shedaniel.cloth"
            includeGroup "dev.architectury"
        }
    }
    maven {
        url "https://maven.squiddev.cc"
        content {
            includeGroup("cc.tweaked")
        }
    }
    maven {
        name = 'Ladysnake Mods'
        url = 'https://maven.ladysnake.org/releases'
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

version = "$project.mod_version-$project.mod_id"
group = project.maven_group

base {
    archivesName = "$project.archives_base_name-$project.minecraft_version"
}

loom {
    splitEnvironmentSourceSets()
    accessWidenerPath = file("src/main/resources/create.accesswidener")
    mods {
        create {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    if (project.compile_only_fabric_api.equals("true")) {
        modCompileOnly fabricApi.module("fabric-rendering-fluids-v1", project.fabric_version)
        modCompileOnly fabricApi.module("fabric-transfer-api-v1", project.fabric_version)
        modCompileOnly fabricApi.module("fabric-events-interaction-v0", project.fabric_version)
        modCompileOnly fabricApi.module("fabric-renderer-api-v1", project.fabric_version)
    } else {
        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    }
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
    if (project.compile_only_rei.equals("false")) {
        modClientRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
    }
    modCompileOnly "cc.tweaked:cc-tweaked-${project.cct_version}"
    modCompileOnly "maven.modrinth:trinkets-canary:${project.trinkets_version}"
    modCompileOnly "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
    modClientCompileOnly "maven.modrinth:sodium:${project.sodium_version}"
    modClientCompileOnly "maven.modrinth:iris:${project.iris_version}"
    modClientCompileOnly "maven.modrinth:hold-my-items:${project.hmi_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": inputs.properties.version
    }

    exclude "_data"
}

tasks.register("serverJar", Jar) {
    archiveClassifier = "server-dev"
    destinationDirectory = layout.buildDirectory.dir("tmp/serverJar")
    from sourceSets.main.output
    from("LICENSE")
    from("licenses") {
        into "licenses"
    }
}

tasks.register('remapServerJar', RemapJarTask) {
    dependsOn tasks.serverJar
    inputFile = tasks.serverJar.archiveFile
    archiveClassifier = "server"
}

tasks.build {
    dependsOn tasks.remapServerJar
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    withSourcesJar()
    tasks.named("sourcesJar", Jar) {
        from("LICENSE")
        from("licenses") {
            into "licenses"
        }
        exclude '_data'
        exclude 'assets'
        exclude 'data'
    }
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    inputs.property "archivesName", project.base.archivesName

    from("LICENSE")
    from("licenses") {
        into "licenses"
    }
}